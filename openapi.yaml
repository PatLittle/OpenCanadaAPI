---
openapi: 3.0.0
servers:
- url: https://open.canada.ca/data/api
  description: Production Portal [PUBLIC]
- url: https://registry.open.canada.ca/api
  description: Production Registry [RESTRICTED ACCESS]
- url: https://staging.open.canada.ca/data/api
  description: Staging Portal [RESTRICTED ACCESS]
- url: https://registry-staging.open.canada.ca/api
  description: Staging Registry [RESTRICTED ACCESS]
- url: https://test.open.canada.ca/data/api
  description: Test Portal [RESTRICTED ACCESS]
- url: https://registry-test.open.canada.ca/api
  description: Test Registry [RESTRICTED ACCESS]

info:
  title: Open Government CKAN API
  description: |
    This API provides live access to the CKAN portion of the Open Government Portal and Registry systems.

    - Portal: https://open.canada.ca
      - our public data portal
      - includes data federated from provinces and municipalities
      - read-only API calls can be made without an API key
      - authorization required only for publishing federated data

    - Registry: https://registry.open.canada.ca
      - accessible within the Government of Canada (GoC) network
      - for collecting and publishing data from GoC departments
      - new datasets must be manually reviewed and approved by the Open Government team
      - publishes approved datasets to the Production Portal automatically
      - user account or API key required for all operations

    Our Staging sites are for sharing upcoming features and testing integration, and Test sites
    are for features in development.

  termsOfService: https://open.canada.ca/en/open-government-licence-canada
  contact:
    name:
      en: TBS Open Government
      fr: Gouvernement ouvert SCT
    url:
      en: https://open.canada.ca/
      fr: https://ouvert.canada.ca/
    email: open-ouvert@tbs-sct.gc.ca
  license:
    name: Open Government License - Canada
    url: https://open.canada.ca/en/open-government-licence-canada
  version: '0.1'
tags:
- name: action
  description: |
    ### CKAN's Action API is a powerful, RPC-style API that exposes all of CKAN's core features

    All endpoints support POST requests with an `application/json` or a
      `multipart/form-data` body.
    - Use an `application/json` POST request when nested json parameters
      are required
    - Use a `multipart/form-data` POST request when file uploads are required

    Read-only endpoints (`*_show`, `*_list`, `*_search` etc.)
    accept GET requests with query parameters.

    Responses are returned in a JSON envelope on success:
    ```json
    {
      "help": "url to complete endpoint help",
      "success": true,
      "result": {...}
    }
    ```
    or on errors:
    ```json
    {
      "help": "url to complete endpoint help",
      "success": false,
      "error": {
        "__type": "error type",
        "message": "error message",
        "field-with-error": ["first-error", "second-error"],
        ...
      }
    }
    ```

  externalDocs:
    description: Full docs
    url: https://docs.ckan.org/en/2.8/api/
security:
- {}
- internal_api_key: []
paths:
  "/action/status_show":
    get:
      summary: Get the CKAN version and a list of installed extensions
      description: Use this API to check that you can reach the server and to check its capabilities.
      tags:
      - action
      responses:
        '200':
          description: Returns the CKAN version and a list of installed extensions
  "/action/package_list":
    get:
      summary: Get a list of all package ids (datasets)
      description: >
        Note: our site uses the same value for the "name" and "id" fields of datasets
      tags:
      - action
      responses:
        '200':
          description: Returns a list of package ids
  "/action/package_search":
    post/get:
      summary: Find packages (datasets) matching query terms
      description: Searches for packages (datasets) matching the specified query terms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                q:
                  type: string
                  description: |
                    A solr query string that will be used to filter and score results
                  examples:
                    All data:
                      value: ''
                    Analytics:
                      value: analytics
                    Mammals:
                      value: mammal population
                fq:
                  type: string
                  description: |
                    A solr filter query that will facet results by removing non-matching items.
                    The available parameters may be discovered by interacting with the
                    facets on https://open.canada.ca/data/dataset and observing the
                    query parameters generated.
                  examples:
                    No filter:
                      value: ''
                    Published by the federal Treasury Board Secretariat:
                      value: 'organization:tbs-sct'
                    Published by municipalities:
                      value: 'jurisdiction:municipal'
                    Transport data:
                      value: 'subject:transport'
                    Federal Open Maps data from Environment Canada:
                      value: 'collection:fgp organization:ec'
                sort:
                  type: string
                  description: |
                    Sort order for the search results, defaults to `score desc, metadata_modified desc`
                    meaning sort by query score order, and with no query sort by most recently modified
                rows:
                  type: integer
                  description: Maximum rows to return, clamped to 1000
                  default: 20
                start:
                  type: integer
                  description: The offset from the beginning of results (0) for pagination
                include_private:
                  type: boolean
                  description: |
                    Must be set to `true` to retrieve results on the Registry,
                    no effect on the Portal
            examples:
              10 most recently modified datasets:
                value:
                  rows: 10
              3 datasets that best match "water use":
                value:
                  q: water use
                  rows: 3
              Datasets number 101-120 by last modified date:
                value:
                  sort: metadata_modified desc
                  start: 100
                  rows: 20
      tags:
      - action
      responses:
        '200':
          description: List of packages (datasets) including all metadata available.
  "/action/package_show":
    get:
      summary: Get metadata about one specific package (dataset)
      description: Returns metadata about the package (dataset) corresponding to its UUID.
        Refer to the [open data schema (type=dataset)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=dataset)
        or the [open information schema (type=info)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=info)
        for information about the metadata fields returned.
      parameters:
      - name: id
        in: query
        description: The package UUID
        schema:
          type: string
          format: uuid
          default: 2916fad5-ebcc-4c86-b0f3-4f619b29f412
      tags:
      - action
      responses:
        '200':
          description: A package metadata object
          content:
            application/json:
              schema:
                en:
                  $ref: 'schemas/dataset-en.json'
                fr:
                  $ref: 'schemas/dataset-fr.json'
  "/action/package_activity_list":
    get:
      summary: Get the activity stream of a package (dataset)
      description: Returns a package's activity stream, newest activities first
      parameters:
      - name: id
        in: query
        description: The package UUID
        schema:
          type: string
          default: 2916fad5-ebcc-4c86-b0f3-4f619b29f412
      - name: offset
        in: query
        description: The offset of the first activity to return, used for pagination
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        description: The maximum number of activities to return
        schema:
          type: integer
          default: 31
      tags:
      - action
      responses:
        '200':
          description: List of activities
  "/action/organization_activity_list":
    get:
      summary: Get the activity stream of an organization
      description: Return an organization's activity stream, newest activites first
      parameters:
      - name: id
        in: query
        description: The id or name (short form) of the organization
        schema:
          type: string
          default: ec
      - name: offset
        in: query
        description: The offset of the first activity to return, used for pagination
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        description: The maximum number of activities to return
        schema:
          type: integer
          default: 31
      tags:
      - action
      responses:
        '200':
          description: List of an organization's activities
  "/action/organization_list_for_user":
    get:
      summary: Get organizations that a user has a given permission for
      description: Return the organizations that the user has a given permission for
      parameters:
      - name: id
        in: query
        description: The name or id of the user, defaults to the user making the request
        schema:
          type: string
      - name: permission
        in: query
        description: The permission the user has against the returned organization
        schema:
          type: string
          default: manage_group
        examples:
          Admin:
            value: admin
          Editor:
            value: manage_group
          Member:
            value: read
      tags:
      - action
      responses:
        '200':
          description: List of organizations for given permission
  "/action/organization_show":
    get:
      summary: Get details of a specific organization
      description: Return the details of an organization
      parameters:
      - name: id
        in: query
        description: The id or name (short form) of the organization
        schema:
          type: string
          default: tbs-sct
      tags:
      - action
      responses:
        '200':
          description: List organization details
  "/action/organization_list":
    get:
      summary: Get names of all organizations
      description: Returns the names (short forms) of all indexed organizations
      parameters: []
      tags:
      - action
      responses:
        '200':
          description: List of organizations
  "/action/resource_search":
    get:
      summary: Find resources
      description: Search resources based on their field values. Note that
        [package_search](#/action/get_action_package_search) has better performance
        and more search functionality than this endpoint.
      parameters:
      - name: query
        in: query
        description: The search criteria string or list of strings of the form ``{field}:{term1}``
        schema:
          type: string
          default: format:csv
      - name: order_by
        in: query
        description: A field on the resource model that orders the results
        schema:
          type: string
      - name: offset
        in: query
        description: Apply an offset to the query
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        description: Apply a limit to the query
        schema:
          type: integer
          default: 0
      tags:
      - action
      responses:
        '200':
          description: List of resources
  "/action/resource_show":
    get:
      summary: Get metadata for a specific resource
      description: Returns the metadata of a resource. Refer to the
        [resource_fields value in the dataset schema](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=dataset)
        for information about the metadata fields.
      parameters:
      - name: id
        in: query
        description: The id of the resource
        schema:
          type: string
          default: e6c8bb1d-3726-418b-9b7e-1d97a9bbb817
      - name: include_tracking
        in: query
        description: Return tracking (usage) information
        schema:
          type: boolean
          default: false
      tags:
      - action
      responses:
        '200':
          description: Return metadata of a resource
          content:
            application/json:
              schema:
                en:
                  $ref: 'schemas/dataset-en.json#/properties/resources/items'
                fr:
                  $ref: 'schemas/dataset-fr.json#/properties/resources/items'
  "/action/datastore_search":
    post/get:
      summary: Search a datastore resource
      description: |
        The datastore_search action allows you to search data in a resource.

        Well-formatted CSV files that are uploaded (not linked) are automatically
        loaded into the datastore.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resource_id:
                  type: string
                  format: uuid
                  description: id or alias of the resource to be searched against
                  examples:
                    Departmental Audit Committees:
                      value: 499383b6-cd2a-466a-9fcf-910d3e427700
                    Provinces and Territories:
                      value: 4cb827a6-a313-4d97-a66b-26fe23984931
                    Deleted Datasets:
                      value: d22d2aca-155b-4978-b5c1-1d39837e1993
                filters:
                  type: object
                  description: matching conditions to select, `application/json` POST requests only
                  examples:
                    (Value not supported for GET requests):
                      value: ''
                q:
                  oneOf:
                  - type: string
                    description: full text query searching across all columns in each row
                  - type: object
                    description: fill text search on each field given
                distinct:
                  type: boolean
                  description: return only distinct rows
                  default: false
                plain:
                  type: boolean
                  description: treat as plain text query
                  default: true
                language:
                  type: string
                  description: language of the full text query
                  default: english
                limit:
                  type: integer
                  description: maximum number of rows to return
                  default: 100
                offset:
                  type: integer
                  description: offset this number of rows
                fields:
                  oneOf:
                  - type: string
                    description: comma-separated string of column names to return
                  - type: array
                    description: list of column names to return
                sort:
                  type: string
                  description: comma-separated string of column names with sort order
                  example: reporting_period desc, line_number
                include_total:
                  type: boolean
                  description: calculate and return the total number of matching rows, set to false for improved performance
                  default: true
                records_format:
                  type: string
                  description: the format for the records return value, set to `csv` or `tsv` for improved performance
                  default: objects
                  enum:
                  - objects
                  - lists
                  - csv
                  - tsv
            examples:
              Chairs of Audit Committees in BC in 2019-2020:
                value:
                  resource_id: 499383b6-cd2a-466a-9fcf-910d3e427700
                  q: 2019-2020
                  filters:
                    province: BC
                    role: C-P
              10 Most Recently Deleted Datasets:
                value:
                  resource_id: d22d2aca-155b-4978-b5c1-1d39837e1993
                  sort: '"Date and Time Deleted/ Date et heure de suppression" desc'
              Provinces and Territories, Abbreviations Only:
                value:
                  resource_id: 4cb827a6-a313-4d97-a66b-26fe23984931
                  fields:
                  - code
                  - ab_en
                  - ab_fr
      tags:
      - action
      responses:
        '200':
          description: List of packages (datasets) including all metadata available.
  "/action/datastore_records_delete":
    post:
      summary: Deletes records from a DataStore table
      description: |
        The datastore_records_delete action allows you to delete a set of data in a resource.

        It will never remove the table itself.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resource_id:
                  type: string
                  format: uuid
                  description: id or alias of the resource to be searched against
                filters:
                  type: object
                  format: dictionary
                  description: matching conditions to select, `application/json` POST requests only
            examples:
              Deleted ATI Summaries from December 2016:
                value:
                  resource_id: 69c59cec-8d61-42cb-903e-8fe68fa7ad99
                  filters:
                    year: 2016
                    month: 12
              Delete Travel Expenses by Reference Number:
                value:
                  resource_id: 33b47e58-f1ec-4e0b-92b2-c0c2686c25d2
                  filters:
                    reference_number: 2023-Q1-0010
              Delete Grants and Contributions by Recipient Counrty:
                value:
                  resource_id: b076ced6-ef48-45b8-8db2-dd7d27c11fe2
                  filters:
                    recipient_country:
                      - US
                      - AU
                      - BE
              Delete All Hospitality Expenses:
                value:
                  resource_id: 82883806-09d1-4937-b5bd-2c413ac5afd3
                  filters: {}
      tags:
      - action
      responses:
        '200':
          description: Dict of original filters.
  "/action/scheming_dataset_schema_show":
    get:
      summary: Return the schema for a dataset type
      description: |
        Dataset metadata schemas are defined in the [ckanext-scheming](https://github.com/ckan/ckanext-scheming)
        format.
      parameters:
      - name: type
        in: query
        description: The dataset type
        schema:
          type: string
          default: dataset
          enum:
          - dataset
          - info
      tags:
      - action
      responses:
        '200':
          description: Returns metadata schema
  "/action/package_create":
    post:
      summary: Create a new dataset (package)
      description: |
        The exact fields available will depend on the `type` parameter.

        Refer to the [open data schema (type=dataset)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=dataset)
        or the [open information schema (type=info)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=info)
        for information about all the metadata fields available.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              en:
                $ref: 'schemas/dataset-en.json'
              fr:
                $ref: 'schemas/dataset-fr.json'
      tags:
      - action
      responses:
        '200':
          description: a copy of the dataset metadata created
  "/action/package_update":
    post:
      summary: Update an existing dataset (package)
      description: |
        The exact fields available will depend on the `type` parameter.

        Refer to the [open data schema (type=dataset)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=dataset)
        or the [open information schema (type=info)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=info)
        for information about all the metadata fields available.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              en:
                $ref: 'schemas/dataset-en.json'
              fr:
                $ref: 'schemas/dataset-fr.json'
      tags:
      - action
      responses:
        '200':
          description: a copy of the dataset metadata updated
  "/action/package_patch":
    post:
      summary: Update only specific fields of an existing dataset (package)
      description: |
        Any fields not passed will retain their original values.

        The exact fields available will depend on the `type` parameter.

        Refer to the [open data schema (type=dataset)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=dataset)
        or the [open information schema (type=info)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=info)
        for information about all the metadata fields available.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              en:
                $ref: 'schemas/dataset-en.json'
              fr:
                $ref: 'schemas/dataset-fr.json'
      tags:
      - action
      responses:
        '200':
          description: a copy of the dataset metadata updated
  "/action/package_delete":
    post:
      summary: Delete a dataset (package)
      description: |
        Remove a dataset and all its resources including uploaded files (where applicable).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: The id of the dataset
      tags:
      - action
      responses:
        '200':
          description: 'null'
  "/action/resource_create":
    post:
      summary: Create a new resource
      description: |
        Add a resource to a dataset (package). POST using `multipart/form-data` to upload a file.
      requestBody:
        content:
          application/json:
            schema:
              en:
                $ref: 'schemas/dataset-en.json#/properties/resources/items'
              fr:
                $ref: 'schemas/dataset-fr.json#/properties/resources/items'
          multipart/form-data:
            schema:
              en:
                $ref: 'schemas/resource-multipart-en.json'
              fr:
                $ref: 'schemas/resource-multipart-fr.json'
      tags:
      - action
      responses:
        '200':
          description: a copy of the resource metadata created
  "/action/resource_update":
    post:
      summary: Update an existing resource
      description: |
        POST using `multipart/form-data` to upload a file.
      requestBody:
        content:
          application/json:
            schema:
              en:
                $ref: 'schemas/dataset-en.json#/properties/resources/items'
              fr:
                $ref: 'schemas/dataset-fr.json#/properties/resources/items'
          multipart/form-data:
            schema:
              en:
                $ref: 'schemas/resource-multipart-en.json'
              fr:
                $ref: 'schemas/resource-multipart-fr.json'
      tags:
      - action
      responses:
        '200':
          description: a copy of the resource metadata updated
  "/action/resource_patch":
    post:
      summary: Update only specific fields of an existing resource
      description: |
        Any fields not passed will retain their original values.

        POST using `multipart/form-data` to upload a file.
      requestBody:
        content:
          application/json:
            schema:
              en:
                $ref: 'schemas/dataset-en.json#/properties/resources/items'
              fr:
                $ref: 'schemas/dataset-fr.json#/properties/resources/items'
          multipart/form-data:
            schema:
              en:
                $ref: 'schemas/resource-multipart-en.json'
              fr:
                $ref: 'schemas/resource-multipart-fr.json'
      tags:
      - action
      responses:
        '200':
          description: a copy of the resource metadata updated
  "/action/resource_delete":
    post:
      summary: Delete a resource
      description: |
        Remove a resource from a dataset (package) and its uploaded file (where applicable).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: The id of the resource
      tags:
      - action
      responses:
        '200':
          description: 'null'
components:
  schemas: {}
  securitySchemes:
    internal_api_key:
      type: apiKey
      in: header
      name: Authorization

